function infoMODE = readansys(name,fpts,name_out)

// ------------------   This file is part of EasyMod   ----------------------------
//  User function
//
//  This function allows to extract natural frequencies and mode shapes
//  calculated by the FEM software ANSYS from the result file generated by
//  ANSYS.
//
//  Synthax:
//  infoMODE = readansys(name,fpts,name_out)
//
//  Input data:
//  name: ANSYS filename containing the modal parameters (frequency and
//  modal constant),
//  fpts: ASCII filename containing the correspondance between the
//  experitmental nodes and the FEM nodes,
//  name_out: UFF 55 filename where the modal parameters will be saved. 
//
//  Output data:
//  infoMODE: structure containing the first set of parameters
//                infoMODE.frequencyk = natural frequency
//                infoMODE.etak = loss factor
//                infoMODE.Bijk = modal constant.
//
// Copyright (C) 2012 David WATTIAUX, Georges KOUROUSSIS


//  Necessary functions:
//  -----------------------------------------------------------
//  unv55write.m


// Natural frequency extraction
star = '***' ;
frequ = 'FREQUENCIESFROMBLOCKLANCZOSITERATION***' ;
fid = mopen(name,'r') ;
while meof(fid) == 0
    valec = mfscanf(fid,'%s') ;
    if isempty(valec) then
        break ;
    end
    if strcmp(star,valec) == 0
        valec1 = mfscanf(fid,'%s') ;
        valec2 = mfscanf(fid,'%s') ;
        valec3 = mfscanf(fid,'%s') ;
        valec4 = mfscanf(fid,'%s') ;
        valec5 = mfscanf(fid,'%s') ;
        valec6 = mfscanf(fid,'%s') ;
        valec = [valec1+valec2+valec3+valec4+valec5+valec6] ;
        if strcmp(frequ,valec) == 0
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            test = %F ;
            num = 0 ;
            while test == %F
                num = num+1 ;
                ind = mfscanf(fid,'%i') ;
                frq0 = mfscanf(fid,'%g') ;
                test = isempty(ind)
                if isempty(ind)
                    else
                    frq(num) = frq0 ;
                end
            end
        end
    end
end
mclose(fid) ;
frq = frq' ;
Nbr_mode = length(frq) ;

// Mode shapes extraction
record = 'RECORD=' ;
modal = [] ;
fid = mopen(name) ;
while meof(fid) == 0
    valec = mfscanf(fid,'%s') ;
    if isempty(valec) then
        break ;
    end
    if strcmp(record,valec) == 0
        valec = mfscanf(fid,'%g') ;
        if valec == 3
            valec = mfscanf(fid,'%s') ;
            ddl_noeud = mfscanf(fid,'%g') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            def_ddl = [] ;
            for i=1:ddl_noeud
                def_ddl = [def_ddl mfscanf(fid,'%g')] ;
            end           
        elseif valec == 4
            valec = mfscanf(fid,'%s') ;
            Nbr_noeud = mfscanf(fid,'%g') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            ar_ddl = [] ;
            for i=1:Nbr_noeud
                ar_ddl = [ar_ddl mfscanf(fid,'%g')] ;
            end
        elseif valec >= 9
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            valec = mfscanf(fid,'%s') ;
            tempo = [] ;
            for i=1:(Nbr_noeud*ddl_noeud)
                tempo = [tempo mfscanf(fid,'%g')] ;
            end
            modal = [modal tempo'] ;
        end
    end
end
mclose(fid)

[M,N] = size(modal) ;
Matrix_modale = modal(1:M,1:Nbr_mode) ;
psi = [] ;
loc = [] ;
pts = read(fpts,-1,4)
[Mpts,Npts] = size(pts) ;
direction_ansys = pts(:,4) ;
direction_exp = pts(:,2) ;

// Correspondance with experimental nodes
for i = 1:Mpts
    for j = 1:length(ar_ddl) ;
        if pts(i,3) == ar_ddl(j) ;
            loc = [loc j] ;
        end
    end
end
for ipts = 1:length(loc)
    if ddl_noeud == 6
        // FEM model with 6 DOF per node
        mes(ipts) = (loc(ipts)*6)-6+direction_ansys(ipts) ;
    elseif ddl_noeud == 3
        // FEM model with 3 DOF per node
        mes(ipts) = (loc(ipts)*3)-3+direction_ansys(ipts) ;
    end
end
for iddl = 1:length(mes)
    psi = [psi ; Matrix_modale(mes(iddl),1:Nbr_mode)] ;
end
[MM,NN] = size(psi) ;

// Storing in UFF file 
xik = 0.01*ones(Nbr_mode,1) ; // Fictious damping for all the modes (=1%)
phi_ansys2exp = zeros(MM,Nbr_mode) ; 
for ind = 1:Nbr_mode 
    infoMODE.frequencyk(1,ind) = frq(ind) ;
    infoMODE.etak(1,ind) = xik(ind) ; 
end
for block = 1:3:MM
    for index = 0:1:2
        phi_ansys2exp(block+direction_exp(block+index)-1,:) = psi(block+index,:) ;
    end
end
infoMODE.Bijk = phi_ansys2exp ;
unv55write(infoMODE,name_out,2) ;

endfunction