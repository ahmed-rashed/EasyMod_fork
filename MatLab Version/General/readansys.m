function infoMODE = readansys(name,fpts,name_out)

% ------------------   This file is part of EasyMod   ----------------------------
%  User function
%
%  This function allows to extract natural frequencies and mode shapes
%  calculated by the FEM software ANSYS from the result file generated by
%  ANSYS.
%
%  Synthax:
%  infoMODE = readansys(name,fpts,name_out)
%
%  Input data:
%  name: ANSYS filename containing the modal parameters (frequency and
%  modal constant),
%  fpts: ASCII filename containing the correspondance between the
%  experitmental nodes and the FEM nodes,
%  name_out: UFF 55 filename where the modal parameters will be saved. 
%
%  Output data:
%  infoMODE: structure containing the first set of parameters
%                infoMODE.frequencyk = natural frequency
%                infoMODE.etak = loss factor
%                infoMODE.Bijk = modal constant.
%
% Copyright (C) 2012 David WATTIAUX, Georges KOUROUSSIS


%  Necessary functions:
%  -----------------------------------------------------------
%  unv55write.m


% Natural frequency extraction
star = '***' ;
frequ = 'FREQUENCIESFROMBLOCKLANCZOSITERATION***' ;
fid = fopen(name,'r') ;
while feof(fid) ~= 1
    valec = fscanf(fid,'%s',[1]) ;
    if strcmp(star,valec) == 1
        valec = fscanf(fid,'%s',[6]) ;
        if strcmp(frequ,valec) == 1
            valec = fscanf(fid,'%s',[8]) ;
            test = 0 ;
            num = 0 ;
            while test ~= 1
                num = num+1 ;
                ind = fscanf(fid,'%i',[1]) ;
                frq = fscanf(fid,'%g',[1]) ;
                test = isempty(ind) ;
                if test == 0
                    freq(num) = frq ;
                end
            end
        end
    end
end
fclose(fid) ;
freq = freq' ;
Nbr_mode = length(freq) ;

% Mode shapes extraction
record = 'RECORD=' ;
modal = [] ;
fid = fopen(name) ;
while feof(fid) ~= 1
    valec = fscanf(fid,'%s',[1]) ;
    if strcmp(record,valec) == 1
        valec = fscanf(fid,'%g',[1]) ;
        if valec == 3
            valec = fscanf(fid,'%s',[1]) ;
            ddl_noeud = fscanf(fid,'%g',[1]) ;
            valec = fscanf(fid,'%s',[4]) ;
            def_ddl = fscanf(fid,'%g',[ddl_noeud]) ;
        elseif valec == 4
            valec = fscanf(fid,'%s',[1]) ;
            Nbr_noeud = fscanf(fid,'%g',[1]) ;
            valec = fscanf(fid,'%s',[4]) ;
            ar_ddl = fscanf(fid,'%g',[Nbr_noeud]) ;
        elseif valec >= 9
            valec = fscanf(fid,'%s',[6]) ;
            tempo = fscanf(fid,'%g',[Nbr_noeud*ddl_noeud]) ;
            modal = [modal tempo] ;
        end
    end
end
fclose(fid) ;

[M,N] = size(modal)
Matrix_modale = modal(1:M,1:Nbr_mode) ;
psi = [] ;
loc = [] ;
pts = load(fpts) ;
[Mpts,Npts] = size(pts) ;
direction_ansys = pts(:,4) ;
direction_exp = pts(:,2) ;

% Correspondance with experimental nodes
for i = 1:Mpts
    for j = 1:length(ar_ddl) ;
        if pts(i,3) == ar_ddl(j) ;
            loc = [loc j] ;
        end
    end
end
for ipts = 1:length(loc)
    if ddl_noeud == 6
        % FEM model with 6 DOF per node
        mes(ipts) = (loc(ipts)*6)-6+direction_ansys(ipts) ;
    elseif ddl_noeud == 3
        % FEM model with 3 DOF per node
        mes(ipts) = (loc(ipts)*3)-3+direction_ansys(ipts) ;
    end
end
for iddl = 1:length(mes)
    psi = [psi ; Matrix_modale(mes(iddl),1:Nbr_mode)] ;
end
[MM,NN] = size(psi) ;

% Storing in UFF file 
xik = 0.01*ones(Nbr_mode,1) ; % Fictious damping for all the modes (=1%)
phi_ansys2exp = zeros(MM,Nbr_mode) ; 
for ind = 1:Nbr_mode 
    infoMODE.frequencyk(1,ind) = freq(ind) ;
    infoMODE.etak(ind) = xik(ind) ; 
end
for block = 1:3:MM
    for index = 0:1:2
        phi_ansys2exp(block+direction_exp(block+index)-1,:) = psi(block+index,:) ;
    end
end
infoMODE.Bijk = phi_ansys2exp ;
unv55write(infoMODE,name_out,2) ;